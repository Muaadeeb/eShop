@page "/placeOrder"

@inject NavigationManager _navigationManager;

@inject IViewShoppingCartUseCase _viewShoppingCartUseCase;
@inject IPlaceOrderUseCase _placeOrderUseCase;

<h3>Placing Order</h3>
<br />

@if (_order != null)
{
    <div class="row">
        <div class="col">
            <CustomerFormComponent OnCustomerInfoSubmitted="HandleCustomerInfoSubmitted"></CustomerFormComponent>


        </div>
        <div class="col">
            <OrderSummaryComponent Order="_order" HidePlaceOrder="true"></OrderSummaryComponent>
        </div>
    </div>
}


@code {

    private Order _order;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _order = await _viewShoppingCartUseCase.Execute();
            StateHasChanged();
        }
    }

    private async void HandleCustomerInfoSubmitted(CustomerViewModel customer)
    {
        var mapper = new AutoMapper.MapperConfiguration(x => x.CreateMap<CustomerViewModel, Order>()).CreateMapper();
        mapper.Map<CustomerViewModel, Order>(customer, _order);

        var orderUniqueId = await _placeOrderUseCase.Execute(_order);

        if (string.IsNullOrEmpty(orderUniqueId))
        {
            //TODO: display err msg.
        }
        else
        {
            _navigationManager.NavigateTo($"/orderConfirm/{orderUniqueId}");
        }
    }
}
