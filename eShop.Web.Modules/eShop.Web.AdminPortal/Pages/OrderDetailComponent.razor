@page "/orderdetail/{id:int}"

@attribute [Authorize]

@inject NavigationManager _navManager

@inject IViewOrderDetailUseCase _viewOrderDetailUseCase
@inject IProcessOrderUseCase _processOrderUseCase

<h3>Order Detail</h3>
<br />

@if (_order != null)
{
    <p>
        <strong>Customer Info:</strong>
    </p>
    <p>@_order.CustomerName</p>
    <p>@_order.CustomerAddress</p>
    <p>@_order.CustomerCity</p>
    <p>@_order.CustomerStateProvince</p>
    <p>@_order.CustomerCountry</p>

    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _order.LineItems)
            {
                <tr>
                    <td>@item.Product.Name</td>
                    <td>@item.Product.Price</td>
                    <td>@item.Quantity</td>

                </tr>
            }
        </tbody>
    </table>

    <br />
    <button type="button" class="btn btn-primary" @onclick="HandleProcessOrder">Mark Order as Processed</button>

}

@code {

    [Parameter]
    public int Id { get; set; }

    private Order _order;
    private AuthenticationState authState;

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        authState = await authStateTask;
    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Id > 0)
        {
            _order = _viewOrderDetailUseCase.Execute(Id);
        }
    }

    private void HandleProcessOrder()
    {
        if (_order != null && authState != null)
        {
            _processOrderUseCase.Execute(_order.OrderId.Value, authState.User.Identity.Name);
            _navManager.NavigateTo("/outstandingorders");
        }
    }
}
